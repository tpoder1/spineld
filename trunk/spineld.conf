
# source           - keyword for source value
# name             - unique name identificator 
# IP address:10001 - IP addresss of the converter and TCP port
# channel          - measure channel - see 0x51 instruction of the spinnel protocol 
# conversion       - Expression fo the value conversion. In the expr you can use perl notation.
#                    A symbo "x" will be replaced by the vallue enquired from the device. 
#
# OR
# 
# expr             - keyword for calculated value
# name             - unique name identificator
# <expr>           - expression to evaluate. In expression any source or calc identicicator could be used. 
#                    Identificator must be written in %{name} expression 
#        
# Example:
#                  
# expr L1_L2_sum   %{L1_value} + %{L2_value}
#
# The follow cunctionality is planned fo the future. The code is not implemented yet. 
#
# The special expression could be used for cumulative values. This values 
# coul by computed by accumulate acc(<expr>). The meaning ofthe acc function is
# acc(<expr>) = <result value of the previous step> + <expr>/<number of seconds since the prevous step>
# 
#
#

#        name        IP address      :port     RS485  channel conversion   
#                                             address sens    expression
#


# converters 0x1 jsou v rozsahu 0 az 30V
source pwr_1         147.229.255.122:10001     0x1    1     x/300          # AC source 1
source pwr_2         147.229.255.122:10001     0x1    2     x/300          # AC source 2
source pwr_3         147.229.255.122:10001     0x1    3     x/300          # AC source 3
source pwr_4         147.229.255.122:10001     0x1    4     x/300          # DC output

# Next lines shows the notation for amperage converters. Converters returns 
# unified values 2-10V (2V = 0A; 10V=200A). 
source mdo_i.L1      147.229.255.122:10001     0x5    1     (x-2000)/40    # [A] amperage MDO  L1
source mdo_i.L2      147.229.255.122:10001     0x5    2     (x-2000)/40    # [A] amperage MDO  L2
source mdo_i.L3      147.229.255.122:10001     0x5    3     (x-2000)/40    # [A] amperage MDO  L3

source do_i.L1       147.229.255.122:10001     0x6    1     (x-2000)/40    # [A] amperage MDO  L1
source do_i.L2       147.229.255.122:10001     0x6    2     (x-2000)/40    # [A] amperage MDO  L2
source do_i.L3       147.229.255.122:10001     0x6    3     (x-2000)/40    # [A] amperage MDO  L3
# Next lines shows the notation for voltage converters. Converters returns
# unified values 2-10V (2V = 0V; 10V = 400V)
source mdo_u.L1      147.229.255.122:10001     0x8    1     (x-2000)/20    # [V] Napeti MDO (privod) L1
source mdo_u.L2      147.229.255.122:10001     0x8    2     (x-2000)/20    # [V] Napeti MDO (privod) L2
source mdo_u.L3      147.229.255.122:10001     0x8    3     (x-2000)/20    # [V] Napeti MDO (privod) L3

# Thermomether THT
source tm1          147.229.255.123:10001      0x1    1      x/10
source m1v          147.229.255.123:10001      0x1    2      x/10
source tm1r         147.229.255.123:10001      0x1    3      x/10



########################
# Computed values
#######################

# Detection if we are on the genset (voltage difference between any mdo and do 
# phase is less than 3V).
expr    on_gen	  (abs(%{mdo_u.L1} - %{do_u.L1}) > 3 || \
				   abs(%{mdo_u.L2} - %{do_u.L2}) > 3 || \
				   abs(%{mdo_u.L3} - %{do_u.L3})) > 3 ? 1 : 0


# power
expr    mdo_p     %{mdo_i.L1} * %{mdo_u.L1} +  %{mdo_i.L2} * %{mdo_u.L2} +  %{mdo_i.L3} * %{mdo_u.L3} # [W] Power MDO
expr    do_p      %{do_i.L1}  * %{do_u.L1} + %{do_i.L2}  * %{do_u.L2}  +  %{do_i.L3}  * %{do_u.L3}  # [W] Ppower DO

